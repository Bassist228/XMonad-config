#+TITLE: XMonad Config
#+PROPERTY: header-args :tangle xmonad.hs 

* TABLE OF CONTENTS :toc:
- [[#imports][Imports]]
  - [[#base][Base]]
  - [[#hooks][Hooks]]
  - [[#layouts][Layouts]]
  - [[#actions][Actions]]
  - [[#stackset][StackSet]]
- [[#default-apps][Default apps]]
- [[#mod-key-and-border-configs][Mod Key and border configs]]
- [[#manage-hooks][Manage Hooks]]
- [[#keybindings][Keybindings]]
  - [[#xmonad][Xmonad]]
  - [[#scrot][Scrot]]
  - [[#dmenu][Dmenu]]
  - [[#apps][Apps]]
  - [[#terminal-and-terminal-apps][Terminal and terminal apps]]
- [[#startup-hooks][Startup Hooks]]
- [[#layouts-1][Layouts]]
- [[#other][Other]]

* Imports
** Base
#+begin_src haskell
import XMonad
import Data.Monoid
import System.Exit
import XMonad.Config.Desktop
#+end_src
** Hooks
#+begin_src haskell
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.ManageDocks
import XMonad.Hooks.SetWMName
import XMonad.Hooks.EwmhDesktops
import XMonad.Hooks.WindowSwallowing
#+end_src
** Layouts
#+begin_src haskell
import XMonad.Layout.Gaps
import XMonad.Layout.Spacing
import XMonad.Layout.BinarySpacePartition
import XMonad.Layout.SimplestFloat
import XMonad.Layout.NoBorders
import XMonad.Layout.ResizableTile
#+end_src
** Utils
#+begin_src haskell
import XMonad.Util.SpawnOnce
import XMonad.Util.Run
import XMonad.Util.EZConfig
#+end_src
** StackSet
#+begin_src haskell
import qualified XMonad.StackSet as W
#+end_src
* Default apps
#+begin_src haskell
myTerminal :: String
myTerminal = "alacritty"

myBrowser :: String
myBrowser = "qutebrowser"

myEmacs :: String
myEmacs = "emacsclient -c -a 'emacs' "

myEditor :: String
myEditor = "emacsclient -c -a 'emacs' "
#+end_src
* Mod Key and border configs
#+begin_src haskell
myModMask :: KeyMask
myModMask = mod4Mask

myBorderWidth :: Dimension
myBorderWidth = 2

myNormalBorderColor = "#acb0d0"
myFocusedBorderColor = "#f43e5c"
#+end_src
* Manage Hooks
#+begin_src haskell
myHandleEventHook = swallowEventHook (className =? "Alacritty" <||> className =? "Termite") (return True)
myManageHook = composeAll
    [  className =? "vlc"             --> doFloat
     , className =? "Gimp"            --> doFloat
     , className =? "feh"             --> doFloat
     , className =? "confirm"         --> doFloat
     , className =? "file_progress"   --> doFloat
     , className =? "dialog"          --> doFloat
     , className =? "download"        --> doFloat
     , className =? "error"           --> doFloat
     , className =? "Gimp"            --> doFloat
     , className =? "notification"    --> doFloat
     , className =? "splash"          --> doFloat
     , className =? "toolbar"         --> doFloat
     , (className =? "firefox" <&&> resource =? "Dialog") --> doFloat  -- Float Firefox Dialog
    ]
#+end_src
* Keybindings
#+begin_src haskell
myKeys :: [(String, X ())]
myKeys =
  [
#+end_src
** Xmonad
#+begin_src haskell
          ("M-<Return>", windows W.swapMaster)
        , ("M-S-q", io exitSuccess)
        , ("M-q", spawn "xmonad --recompile")
        , ("M-S-r", spawn "xmonad --restart")
        , ("M-S-c", kill)
        , ("M-S-l", spawn "betterlockscreen --lock blur")
#+end_src
** Scrot
#+begin_src haskell
        , ("<Print>", spawn "scrot")
        , ("M-<Print>", spawn "scrot -s")
#+end_src
** Dmenu
#+begin_src haskell
        , ("M-d", spawn "dmenu_run -i -p \"Run: \"")
#+end_src
** Apps
#+begin_src haskell
        , ("M-f", spawn "firefox-bin")
        , ("M-p", spawn "pcmanfm")
        , ("M-e", spawn "emacsclient -c -a 'emacs' ")
#+end_src
** Terminal and terminal apps
#+begin_src haskell
        , ("M-S-<Return>", spawn (myTerminal))
        , ("M-<KP_End>", spawn (myTerminal ++ " -e htop"))
        , ("M-<KP_Down>", spawn (myTerminal ++ " -e ranger"))
        , ("M-<KP_Page_Down>", spawn (myTerminal ++ " -e newsboat"))
        , ("M-<KP_Insert>", spawn (myTerminal ++ " e spt"))
 ]
#+end_src
* Startup Hooks
#+begin_src haskell
myStartupHook = do
    --spawnOnce "lxsession"
    spawnOnce "picom --experimental-backend &"
    setWMName "LG3D"
    spawnOnce "~/.fehbg &"
    spawnOnce "/usr/bin/emacs --daemon"
#+end_src
* Layouts
#+begin_src haskell
tall =  spacingRaw True (Border 0 0 0 0) True (Border 5 5 5 5) True $ gaps [(U,29), (R,10), (L,10), (D,10)] $ avoidStruts $ Tall 1 (3/100) (50/100)

bsp =  spacingRaw True (Border 0 0 0 0) True (Border 5 5 5 5) True $ gaps [(U,29), (R,10), (L,10), (D,10)] $ emptyBSP

myLayoutHook = tall ||| noBorders tall |||  bsp ||| noBorders Full ||| simplestFloat
#+end_src
* Other
#+begin_src haskell
main = do
      xmproc <- spawnPipe "dbus-launch xmobar -d"
      xmonad $ docks def {
                    startupHook        = myStartupHook
                  , modMask            = mod4Mask
                  , borderWidth        = myBorderWidth
                  , normalBorderColor  = myNormalBorderColor
                  , focusedBorderColor = myFocusedBorderColor
                  , layoutHook         = myLayoutHook
                  , manageHook         = myManageHook
                  , logHook            = dynamicLogWithPP $
                      xmobarPP {
                                 ppOutput = hPutStrLn xmproc
                               , ppTitle = xmobarColor "#FFFFFF" "" . shorten 100
                               , ppCurrent = xmobarColor "#7aa2f7" ""
                               , ppSep = "   "
                               , ppOrder  = \(ws : l : _ : _ ) -> [ws,l]
                               }
                } `additionalKeysP` myKeys
#+end_src
